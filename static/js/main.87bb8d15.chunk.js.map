{"version":3,"sources":["Layout/Navbar.js","Pages/home.js","Pages/auth.js","Actions/authActions.js","Pages/addMemo.js","Actions/memoActions.js","Components/post.js","Pages/content.js","App.js","serviceWorker.js","Reducer/contentReducer.js","Reducer/authReducer.js","Reducer/rootReducer.js","Firebase/firebaseConfig.js","index.js"],"names":["Navbar","className","Home","props","history","useHistory","role","aria-label","href","onClick","push","id","className-","Auth","state","email","password","handleSubmit","e","console","log","SignIn","handleChange","setState","target","value","onChange","this","placeholder","style","width","Component","connect","dispatch","creds","cred","getState","getFirebase","auth","signInWithEmailAndPassword","then","type","catch","err","AddMemo","memo","addMemo","editor","ClassicEditor","data","text","event","getData","getFirestore","collection","add","createdAt","Date","Post","moment","toDate","format","parse","compose","memos","firestore","ordered","firestoreConnect","map","key","App","exact","path","component","Content","Boolean","window","location","hostname","match","initState","content","contentReducer","action","authError","authReducer","rootReducer","combineReducers","firestoreReducer","firebase","firebaseReducer","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","rrfProps","config","userProfile","useFirestoreForProfile","createFirestoreInstance","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.87bb8d15.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css'\n\nconst Navbar = () => {\n    return(\n        <div className=\"navbar-container\">\n            <p className=\"navbar-text\">AMNet</p>\n        </div>\n    )\n}\n\nexport default Navbar;","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\n\n\nconst Home = (props) => {\n    let history = useHistory()\n\n    const handleRead = () => {\n        history.push('/amnet/main')\n    }\n\n    const handleLogin = (props) => {\n        history.push(\"/amnet/auth\")\n    }\n    return(\n        <div className=\"container\">\n            <div className=\"home-container\">\n                <div className=\"jumbo-text-container\">\n                <p className=\"jumbo-text\">Hi <span role=\"img\" aria-label=\"emoji\">üëã</span>,</p>\n                    <p className=\"jumbo-text\">I am Aniruddh.</p>\n                    <p className=\"jumbo-text\">Welcome to</p>\n                    <p className=\"jumbo-text\">my diary.</p>\n                </div>\n                <a href=\"#\" onClick={handleRead}>\n                <div className=\"button\">\n                    <p id=\"button-text\">Start Reading</p>\n                        <div className=\"button-wrapper\"></div>\n                </div>\n                </a>\n                <div className=\"info\">\n                    <p className=\"info-text\">More About Me</p>\n                    <div className-=\"info-des-wrapper\">\n                        <p className=\"info-des\">I am Aniruddh. Aniruddh Mukherjee. Web dev, graphic designer and an avid gamer.</p>\n                        <p className=\"info-des\">\n                            I am from the city of Kolkata, India. Apart \n                            from quirky jokes, I have interest in 3D design, and the human psychology.</p>\n                        <p className=\"info-des\">Big fan of cosmology books and RPGs.</p>\n                    </div>\n                </div>\n                <a href=\"mailto:aniruddha.xccentric@gmail.com\">\n                    <div className=\"button\">\n                        <p id=\"button-text-d\">Drop me an email<span role=\"img\" aria-label=\"emoji\">‚úâÔ∏è</span></p>\n                            <div className=\"button-wrapper\"></div>\n                    </div>\n                </a>\n                <div className=\"blu-area\">\n                    <div className=\"blu-tit\">Why This Site</div>\n                        <div className=\"blu-text-wrapper\">\n                            <p className=\"blu-text\">\n                                In the 2010 movie ‚ÄòThe Social Network‚Äô, Zuckerberg builds a blog called ZuckNet. And while watching the movie, I thought it would be really cool to have something like that for myself. And, that is something that really got me into learning to code.\n                            </p>\n                            <p className=\"blu-text\">\n                            So, this site is to keep that promise that I made to myself a long time ago <span role=\"img\" aria-label=\"emoji\">üëè</span> \n                            </p>\n                        </div>\n                        <a href=\"#\" onClick={handleLogin}>\n                            <div   className=\"blu-button\">\n                                <p  id=\"button-text-blu\">LOGIN AS ADMIN <span role=\"img\" aria-label=\"emoji\"> üîê</span></p>\n                                    <div  className=\"blu-button-wrapper\"></div>\n                            </div>\n                        </a>\n                    \n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { SignIn } from '../Actions/authActions';\n\nclass Auth extends Component {\n\n  state ={\n    email: '',\n    password: ''\n  }\n\n  handleSubmit = e => {\n    console.log(this.state);\n    this.props.SignIn(this.state)\n  }\n\n  handleChange = e => {\n   \n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n    render(){\n        return(\n            <div className=\"auth-blue\">\n                <p className=\"auth-title\">LOGIN AS ADMIN <span role=\"img\" aria-label=\"emoji\"> üîê</span></p>\n                <div className=\"auth-input-wrapper\">\n                    <input id=\"email\" onChange={this.handleChange} className=\"auth-input\" placeholder=\"Ex:your@domain.com\" />\n                    <input id=\"password\" onChange={this.handleChange}  className=\"auth-input\" placeholder=\"Password\" />\n                </div>\n                <a onClick={this.handleSubmit}>\n                  <div style={{width:\"75vw\"}} className=\"blu-button\">\n                          <p id=\"button-text-blu\">LOGIN AS ADMIN <span role=\"img\" aria-label=\"emoji\"> üîê</span></p>\n                              <div className=\"blu-button-wrapper\"></div>\n                  </div>\n                </a>\n            </div>\n        )\n    }\n}\n\n\n// const mapStateToProps = state => {\n//   console.log(state);\n//   return {\n//     authError: state.auth.authError,\n//     auth: state.firebase.auth\n//   }\n// }\n\nconst mapDispatchToProps = dispatch => {\n  return{\n    SignIn: creds => dispatch(SignIn(creds))\n  }\n}\n \nexport default connect(null, mapDispatchToProps)(Auth);","export const SignIn = (cred) => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase()\n\n        firebase.auth().signInWithEmailAndPassword(\n            cred.email,\n            cred.password\n        ).then(() => {\n            dispatch({type: 'LOGIN_SUCCESSFUL'})\n        }).catch((err) => {\n            dispatch({type: 'LOGIN_ERROR', err})\n        })\n    }\n}","import React, { Component } from 'react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic'\nimport CKEditor from '@ckeditor/ckeditor5-react'\nimport { connect } from 'react-redux';\nimport { addMemo } from '../Actions/memoActions';\n\n\nclass AddMemo extends Component{\n    state={\n        memo: \"\"\n    }\n    handleSubmit = e => {\n        this.props.addMemo(this.state)\n        this.props.history.push('/amnet/main')\n    }\n    render(){\n        return(\n            <div className=\"add-wrapper\">\n                <p className=\"add-title\">ADD A LOG <span role=\"img\" aria-label=\"emoji\"> ‚úçüèª</span></p>\n                <div className=\"editor\">\n                    <CKEditor\n                        editor={ClassicEditor}\n                        className=\"editor\"\n                        data={this.state.text}\n                        onChange={(event, editor) => {\n                            const data = editor.getData()\n                            this.setState({\n                                memo: data\n                            })\n                        }} \n                    />\n                </div>\n               <a onClick={this.handleSubmit}>\n               <div className=\"add-button-wrapper\">\n                    <div className=\"button\">\n                        <p id=\"button-text-d\">Post To Public üåé</p>\n                        <div className=\"button-wrapper\"></div>\n                    </div>\n                </div>\n               </a>\n            </div>\n        )\n    }\n}\n\n// const mapStateToProps = state => {\n//     console.log(state);\n//     return{\n//         auth: state.firebase.auth\n//     }\n// }\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        addMemo: memo => dispatch(addMemo(memo))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(AddMemo);","export const addMemo = (memo) => {\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\n        //async call to database\n        const  firestore = getFirestore()\n        firestore.collection('memos').add({\n            ...memo,\n            createdAt: new Date()\n        }).then(() => {\n            dispatch({type:'ADD_MEMO', memo})\n        }).catch((err) => {\n            dispatch({type: 'ADD_MEMO_ERR', err})\n        })\n    }\n}","import React, { Component } from 'react';\nimport moment from 'moment';\nimport parse from 'html-react-parser'\nclass Post extends Component {\n    render(){\n        \n        return(\n            <div className=\"post-container\">\n                <div className=\"title-wrapper\">\n                <p className=\"title\"><span role=\"img\" aria-label=\"emoji\">üóìÔ∏è</span>{moment(this.props.memo.createdAt.toDate()).format('llll')}</p>\n                </div>\n                <div className=\"post-wrapper\">\n                    <p>\n                        {parse(this.props.memo.memo)}\n                    </p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Post","import React from 'react';\nimport Post from '../Components/post';\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\n\nconst Content = ({memos}) => {\n    \n    return(\n        <div className=\"content-wrapper\">\n            {memos && memos.map(memo => {\n                return(\n                    <Post key={memo.id} memo={memo} />\n                )\n            })}\n        </div>\n\n    )\n}\n\nconst mapStateToProps = state => {\n    console.log(state);\n    return{\n        memos: state.firestore.ordered.memos\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps),\n    firestoreConnect([\n        {collection: 'memos'}\n    ])\n)(Content)","import React, { Component } from 'react';\nimport Navbar from './Layout/Navbar';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport Home from './Pages/home';\nimport Auth from './Pages/auth';\nimport AddMemo from './Pages/addMemo';\nimport Content from './Pages/content';\n\n\nclass App extends Component{\n  render(){\n    return(\n      <Router>\n        <Navbar/>\n        <Switch>\n          <Route exact path=\"/amnet\" component={Home}/>\n          <Route path=\"/amnet/add\" component={AddMemo}/>\n          <Route path=\"/amnet/auth\" component={Auth}/>\n          <Route path=\"/amnet/main\" component={Content}/>\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\n    memos: \n        [\n            {id: '1', content: 'This is spmmeyhidf esfesfFeFf asfddfffg fgfwfegffes fgffggf wf'},\n            {id: '2', content: 'This is spmmeyhidf esfesfFeFf asfddfffg fgfwfegffes fgffggf wf'}\n        ]\n}\n\n\nconst contentReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'ADD_MEMO':\n            console.log('created memo', action.memo);\n            return state\n        case 'ADD_MEMO_ERR':\n            console.log('task failed successfully!', action.err);\n            return state;\n    \n        default:\n            return state\n    }\n}\n\nexport default contentReducer","const initState = {\n    authError: null\n}\n\nconst authReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'LOGIN_SUCCESSFUL':\n            console.log('login success');\n            return {\n                ...state,\n                authError: null\n            }\n        case 'LOGIN_ERROR':\n            console.log('login failed');\n            return {\n                ...state,\n                authError: 'LOGIN FAILED'\n            }\n        default:\n            return state\n    }\n}\n\nexport default authReducer","import authReducer from './authReducer'\nimport contentReducer from './contentReducer'\nimport { combineReducers } from 'redux'\nimport { firestoreReducer } from 'redux-firestore'\nimport { firebaseReducer } from 'react-redux-firebase'\n\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    memos: contentReducer,\n    firestore: firestoreReducer,\n    firebase: firebaseReducer\n})\n\nexport default rootReducer","import firebase from 'firebase/firebase-app'\nimport 'firebase/firestore'\n\nexport const firebaseConfig = {\n    apiKey: \"AIzaSyCLPVBJyxwYNhole-ZIRhj5yU0HOANVhsY\",\n    authDomain: \"amnet-42871.firebaseapp.com\",\n    databaseURL: \"https://amnet-42871.firebaseio.com\",\n    projectId: \"amnet-42871\",\n    storageBucket: \"amnet-42871.appspot.com\",\n    messagingSenderId: \"741920340609\",\n    appId: \"1:741920340609:web:79ca1cf7f53ecdb82aeb80\",\n    measurementId: \"G-SRH0EKSGLP\"\n  };\n\n  \n  firebase.initializeApp(firebaseConfig)\n  \n\n  export default firebase","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider, useSelector } from 'react-redux';\nimport contentReducer from './Reducer/contentReducer';\nimport rootReducer from './Reducer/rootReducer';\nimport thunk from 'redux-thunk';\nimport { getFirebase, ReactReduxFirebaseProvider, isLoaded } from 'react-redux-firebase';\nimport { getFirestore, reduxFirestore, createFirestoreInstance } from 'redux-firestore';\nimport firebase from 'firebase/app'\nimport fbConfig, {firebaseConfig} from './Firebase/firebaseConfig'\n\nfirebase.initializeApp(firebaseConfig);\n\nconst store = createStore(rootReducer, \n  compose(\n    applyMiddleware(thunk.withExtraArgument({getFirebase, getFirestore})),\n    reduxFirestore(firebase, fbConfig)\n  ))\n\nconst rrfConfig = {\n  userProfile: 'users',\n  useFirestoreForProfile: true\n}\n\nconst rrfProps = {\n  firebase,\n  config: rrfConfig, firebaseConfig,\n  dispatch: store.dispatch,\n  createFirestoreInstance\n}\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <ReactReduxFirebaseProvider {...rrfProps}>\n        <App />\n      </ReactReduxFirebaseProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}